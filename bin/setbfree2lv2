#!/usr/bin/perl
#
# setbfree2lv2 - cfg-file converter to LV2 converter for
# setBfree - LV2 plugin
#
# This generator converts setBfree cfg-files to LV2 usable sounds
#
# (c) by H. Wirtz <dcoredump@googlemail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
#

use Data::Dumper;

$LV2_BUNDLE_NAME="b_synth";
$LV2_URI="http://gareus.org/oss/lv2/".$LV2_BUNDLE_NAME;
$LV2_INSTALL_PATH="/zynthian/zynthian-my-plugins/lv2";

@CMD_OPTION=@ARGV;
while($option=shift(@CMD_OPTION))
{
        if($option=~/^-(.+)\s*/)
        {
                if($1=~/b/i)
                {
                        $option{'bank'}=1;
                }
                elsif($1=~/n/i)
                {
                        $option{'voice_no'}=1;
                }
        }
}

while($CFG=shift(@ARGV))
{
        next if($CFG=~/^\s*$/);

        $BANK=$CFG;
        $BANK=~s{.*/}{};      # removes path  
        $BANK=~s{\.[^.]+$}{}; # removes extension

        $_LV2_BUNDLE_NAME=$LV2_BUNDLE_NAME;

        $voice_no=0;

	# First read all config lines and preformat them for a usable internal
	# data structure
        open(CFG,"$CFG") || die ("Cannot open \'$CFG\': $!");
        while($s=<CFG>)
        {
                chop($s);
                next if($s=~/^\s*$/);
        	next if($s=~/^\s*#/);
		$l=$l.$s;
		if($s=~/\}/)
		{
			if($l=~/\{\s*(.+)\s*\}/)
			{
				$l=$1;
				$l=~s/\s+//g;
				push(@cfg,$l);
			}
			$l="";
		}
	}
	close(CFG);

	foreach $cfg (@cfg)
	{
		undef(%config);
		$voice_no++;
		foreach $item (split(",",$cfg))
		{
			($i,$v)=split("=",$item);
			if($i eq "name")
			{
				$v=~s/\'/_/g;
				$v=~s/:/_/g;
				$v=~s/:/_/g;
			}
			if($v!~/^\".+\"$/)
			{
				$v="\"".$v."\"";
			}
			if($i=~/^drawbars(.*)$/)
			{
				if($1 eq "")
				{
					for($x=1;$x<9;$x++)
					{
						$config{"drawbar_upper_$x"}=substr($v,$x,1);
					}
				}
				elsif($1 eq "lower")
				{
					for($x=1;$x<9;$x++)
					{
						$config{"drawbar_lower_$x"}=substr($v,$x,1);
					}
				}
				elsif($1 eq "pedals")
				{
					$config{"drawbar_pedal_1"}=substr($v,1,1);
					$config{"drawbar_pedal_2"}=substr($v,2,1);
				}
				delete($config{$i});
				next;
			}
			eval("\$config{\'$i\'}=$v;");
		}

		$voice=$config{'name'};
		my($voice_name)=$voice;

		if(defined($option{'voice_no'}) && defined($option{'bank'}))
		{
			if($voice_no<10)
			{
				$voice=$BANK."__0".$voice_no."__".$voice;
			}
			else
			{
				$voice=$BANK."__".$voice_no."__".$voice;
			}
		}
		elsif(defined($option{'bank'}))
		{
			$voice=$BANK."__".$voice;
		}
		elsif(defined($option{'voice_no'}))
		{
			$voice=$voice_no."__".$voice;
		}

		my($path)=$LV2_INSTALL_PATH."/".$_LV2_BUNDLE_NAME."-".$voice.".lv2";

		if(!-d $LV2_INSTALL_PATH)
		{
			mkdir($LV2_INSTALL_PATH) || die("Cannot create dir \'$LV2_INSTALL_PATH\':$!\n");
		}
		if(!-d $path)
		{
			mkdir($path) || die("Cannot create dir \'$path\':$!\n");
		}

		print "Writing ".$path."/".$voice.".ttl\n";

		write_manifest($path,$voice);

		open($setbfree_voice,">".$path."/".$voice.".ttl") || die ("Cannot open \'".$path."/".$voice.".ttl\': $!");
                write_preset_header($voice,$voice_name);
		foreach $k (sort(keys(%config)))
		{
			print_lv2_port($k,$config{$k});
		}
		print $setbfree_voice "        ] .\n";
		close($setbfree_voice);
	}
}

sub write_preset_header
{
        ($voice,$voice_name)=@_;
        print $setbfree_voice "\@prefix atom: <http://lv2plug.in/ns/ext/atom#> .\n";
        print $setbfree_voice "\@prefix lv2: <http://lv2plug.in/ns/lv2core#> .\n";
        print $setbfree_voice "\@prefix pset: <http://lv2plug.in/ns/ext/presets#> .\n";
        print $setbfree_voice "\@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n";
        print $setbfree_voice "\@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n";
        print $setbfree_voice "\@prefix state: <http://lv2plug.in/ns/ext/state#> .\n";
        print $setbfree_voice "\@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n";
        print $setbfree_voice "\n";
        #print $setbfree_voice "<".$LV2_URI."#".$voice.">\n";
        print $setbfree_voice "<>\n";
        print $setbfree_voice "        a pset:Preset ;\n";
        print $setbfree_voice "        lv2:appliesTo <".$LV2_URI."> ;\n";
        #print $setbfree_voice "        rdfs:label \"".$voice_name."\" ;\n";
}

sub write_manifest
{
        ($path,$voice)=@_;

        open(MANIFEST,">$path/manifest.ttl")||die("Cannot open \'$path/manifest.tt
l\': $!\n");
        print MANIFEST "\@prefix atom: <http://lv2plug.in/ns/ext/atom#> .\n";
        print MANIFEST "\@prefix lv2: <http://lv2plug.in/ns/lv2core#> .\n";
        print MANIFEST "\@prefix pset: <http://lv2plug.in/ns/ext/presets#> .\n";
        print MANIFEST "\@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n";
        print MANIFEST "\@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n";
        print MANIFEST "\@prefix state: <http://lv2plug.in/ns/ext/state#> .\n";
        print MANIFEST "\@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n";

        print MANIFEST "\n";
        #print MANIFEST "<".$LV2_URI."#".$voice.">\n";
        print MANIFEST "<".$voice.".ttl>\n";
        print MANIFEST "        lv2:appliesTo <".$LV2_URI."> ;\n";
        #print MANIFEST "        a pset:Bank $BANK ;\n";
        print MANIFEST "        a pset:Preset ;\n";
        print MANIFEST "        rdfs:label \"".$voice."\" ;\n";
        print MANIFEST "        rdfs:seeAlso <".$voice.".ttl> .\n";
        close(MANIFEST);
}

sub print_lv2_port
{
        ($port_name,$port_val)=@_;

        print $setbfree_voice "                lv2:symbol \"".$port_name."\" ;\n";
        $port_val.=".0" if($port_val!~/\./);
        print $setbfree_voice "                pset:value ".$port_val."\n";
}

